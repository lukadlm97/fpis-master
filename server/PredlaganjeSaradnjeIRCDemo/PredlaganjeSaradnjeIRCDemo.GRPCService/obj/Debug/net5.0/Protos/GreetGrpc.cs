// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PredlaganjeSaradnjeIRCDemo.GRPCService {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Greeter
  {
    static readonly string __ServiceName = "helloworld.Greeter";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest> __Marshaller_helloworld_HelloRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply> __Marshaller_helloworld_HelloReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies> __Marshaller_helloworld_HelloReplies = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies.Parser));

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply> __Method_SayHello = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_helloworld_HelloRequest,
        __Marshaller_helloworld_HelloReply);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies> __Method_SayHelloMoreTime = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHelloMoreTime",
        __Marshaller_helloworld_HelloRequest,
        __Marshaller_helloworld_HelloReplies);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PredlaganjeSaradnjeIRCDemo.GRPCService.GreetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    [grpc::BindServiceMethod(typeof(Greeter), "BindService")]
    public abstract partial class GreeterBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply> SayHello(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies> SayHelloMoreTime(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Greeter</summary>
    public partial class GreeterClient : grpc::ClientBase<GreeterClient>
    {
      /// <summary>Creates a new client for Greeter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreeterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Greeter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreeterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply SayHello(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply SayHello(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply> SayHelloAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply> SayHelloAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies SayHelloMoreTime(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloMoreTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies SayHelloMoreTime(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHelloMoreTime, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies> SayHelloMoreTimeAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloMoreTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies> SayHelloMoreTimeAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHelloMoreTime, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreeterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_SayHelloMoreTime, serviceImpl.SayHelloMoreTime).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReply>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_SayHelloMoreTime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.HelloReplies>(serviceImpl.SayHelloMoreTime));
    }

  }
  public static partial class Authenticate
  {
    static readonly string __ServiceName = "helloworld.Authenticate";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest> __Marshaller_helloworld_UserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> __Marshaller_helloworld_UserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest> __Marshaller_helloworld_UserCreateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest.Parser));

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> __Method_LogIn = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogIn",
        __Marshaller_helloworld_UserRequest,
        __Marshaller_helloworld_UserResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> __Method_Register = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_helloworld_UserCreateRequest,
        __Marshaller_helloworld_UserResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PredlaganjeSaradnjeIRCDemo.GRPCService.GreetReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Authenticate</summary>
    [grpc::BindServiceMethod(typeof(Authenticate), "BindService")]
    public abstract partial class AuthenticateBase
    {
      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> LogIn(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> Register(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Authenticate</summary>
    public partial class AuthenticateClient : grpc::ClientBase<AuthenticateClient>
    {
      /// <summary>Creates a new client for Authenticate</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthenticateClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Authenticate that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthenticateClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthenticateClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthenticateClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse LogIn(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse LogIn(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogIn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> LogInAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> LogInAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogIn, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse Register(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse Register(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> RegisterAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse> RegisterAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthenticateClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthenticateClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthenticateBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LogIn, serviceImpl.LogIn)
          .AddMethod(__Method_Register, serviceImpl.Register).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuthenticateBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_LogIn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse>(serviceImpl.LogIn));
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserCreateRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UserResponse>(serviceImpl.Register));
    }

  }
  public static partial class Company
  {
    static readonly string __ServiceName = "helloworld.Company";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest> __Marshaller_helloworld_EmptyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse> __Marshaller_helloworld_CompaniesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse> __Marshaller_helloworld_CitiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse> __Marshaller_helloworld_EmployeesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse> __Marshaller_helloworld_LocationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse> __Marshaller_helloworld_ContactsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest> __Marshaller_helloworld_CompanyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> __Marshaller_helloworld_UpsertCompanyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest> __Marshaller_helloworld_ContactRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse> __Marshaller_helloworld_UpsertContactResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest> __Marshaller_helloworld_LocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse> __Marshaller_helloworld_UpsertLocationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse.Parser));
    static readonly grpc::Marshaller<global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest> __Marshaller_helloworld_SearchCompanyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest.Parser));

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse> __Method_GetCompanies = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCompanies",
        __Marshaller_helloworld_EmptyRequest,
        __Marshaller_helloworld_CompaniesResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse> __Method_GetCities = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCities",
        __Marshaller_helloworld_EmptyRequest,
        __Marshaller_helloworld_CitiesResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse> __Method_GetEmployees = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEmployees",
        __Marshaller_helloworld_EmptyRequest,
        __Marshaller_helloworld_EmployeesResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse> __Method_GetLocations = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLocations",
        __Marshaller_helloworld_EmptyRequest,
        __Marshaller_helloworld_LocationsResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse> __Method_GetContact = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContact",
        __Marshaller_helloworld_EmptyRequest,
        __Marshaller_helloworld_ContactsResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> __Method_AddCompany = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCompany",
        __Marshaller_helloworld_CompanyRequest,
        __Marshaller_helloworld_UpsertCompanyResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse> __Method_AddContact = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddContact",
        __Marshaller_helloworld_ContactRequest,
        __Marshaller_helloworld_UpsertContactResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse> __Method_AddLocation = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddLocation",
        __Marshaller_helloworld_LocationRequest,
        __Marshaller_helloworld_UpsertLocationResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> __Method_DeleteCompany = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCompany",
        __Marshaller_helloworld_SearchCompanyRequest,
        __Marshaller_helloworld_UpsertCompanyResponse);

    static readonly grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> __Method_UpdateCompany = new grpc::Method<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCompany",
        __Marshaller_helloworld_CompanyRequest,
        __Marshaller_helloworld_UpsertCompanyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PredlaganjeSaradnjeIRCDemo.GRPCService.GreetReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Company</summary>
    [grpc::BindServiceMethod(typeof(Company), "BindService")]
    public abstract partial class CompanyBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse> GetCompanies(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse> GetCities(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse> GetEmployees(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse> GetLocations(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse> GetContact(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> AddCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse> AddContact(global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse> AddLocation(global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> DeleteCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> UpdateCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Company</summary>
    public partial class CompanyClient : grpc::ClientBase<CompanyClient>
    {
      /// <summary>Creates a new client for Company</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CompanyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Company that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CompanyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CompanyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CompanyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse GetCompanies(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompanies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse GetCompanies(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCompanies, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse> GetCompaniesAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCompaniesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse> GetCompaniesAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCompanies, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse GetCities(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse GetCities(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCities, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse> GetCitiesAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse> GetCitiesAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCities, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse GetEmployees(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmployees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse GetEmployees(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEmployees, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse> GetEmployeesAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmployeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse> GetEmployeesAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEmployees, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse GetLocations(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse GetLocations(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLocations, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse> GetLocationsAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse> GetLocationsAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLocations, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse GetContact(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse GetContact(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse> GetContactAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse> GetContactAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContact, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse AddCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCompany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse AddCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddCompany, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> AddCompanyAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCompanyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> AddCompanyAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddCompany, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse AddContact(global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddContact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse AddContact(global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddContact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse> AddContactAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddContactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse> AddContactAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddContact, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse AddLocation(global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse AddLocation(global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddLocation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse> AddLocationAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse> AddLocationAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddLocation, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse DeleteCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse DeleteCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCompany, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> DeleteCompanyAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCompanyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> DeleteCompanyAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCompany, null, options, request);
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse UpdateCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse UpdateCompany(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCompany, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> UpdateCompanyAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCompanyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse> UpdateCompanyAsync(global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCompany, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CompanyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CompanyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CompanyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCompanies, serviceImpl.GetCompanies)
          .AddMethod(__Method_GetCities, serviceImpl.GetCities)
          .AddMethod(__Method_GetEmployees, serviceImpl.GetEmployees)
          .AddMethod(__Method_GetLocations, serviceImpl.GetLocations)
          .AddMethod(__Method_GetContact, serviceImpl.GetContact)
          .AddMethod(__Method_AddCompany, serviceImpl.AddCompany)
          .AddMethod(__Method_AddContact, serviceImpl.AddContact)
          .AddMethod(__Method_AddLocation, serviceImpl.AddLocation)
          .AddMethod(__Method_DeleteCompany, serviceImpl.DeleteCompany)
          .AddMethod(__Method_UpdateCompany, serviceImpl.UpdateCompany).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CompanyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetCompanies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompaniesResponse>(serviceImpl.GetCompanies));
      serviceBinder.AddMethod(__Method_GetCities, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.CitiesResponse>(serviceImpl.GetCities));
      serviceBinder.AddMethod(__Method_GetEmployees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmployeesResponse>(serviceImpl.GetEmployees));
      serviceBinder.AddMethod(__Method_GetLocations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationsResponse>(serviceImpl.GetLocations));
      serviceBinder.AddMethod(__Method_GetContact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.EmptyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactsResponse>(serviceImpl.GetContact));
      serviceBinder.AddMethod(__Method_AddCompany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse>(serviceImpl.AddCompany));
      serviceBinder.AddMethod(__Method_AddContact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.ContactRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertContactResponse>(serviceImpl.AddContact));
      serviceBinder.AddMethod(__Method_AddLocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.LocationRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertLocationResponse>(serviceImpl.AddLocation));
      serviceBinder.AddMethod(__Method_DeleteCompany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.SearchCompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse>(serviceImpl.DeleteCompany));
      serviceBinder.AddMethod(__Method_UpdateCompany, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PredlaganjeSaradnjeIRCDemo.GRPCService.CompanyRequest, global::PredlaganjeSaradnjeIRCDemo.GRPCService.UpsertCompanyResponse>(serviceImpl.UpdateCompany));
    }

  }
}
#endregion
